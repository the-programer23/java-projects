.backup backup-name --> creates a backup file
.restore backup-name --> restores backed-up file;

SELECT artists.name, albums.name, songs.track, songs.title FROM songs
INNER JOIN albums ON songs.album = albums._id
INNER JOIN artists ON albums.artist = artists._id
WHERE songs.title LIKE "%doctor%"
ORDER BY artists.name, albums.name, songs.track;

//WHERE songs.title LIKE "%doctor%" means show results where songs.title contains the word doctor

CREATE VIEW artist_list AS
SELECT artists.name as artist, albums.name AS album, songs.title FROM songs
INNER JOIN albums ON songs.album = albums._id
INNER JOIN artists ON albums.artist = artists._id
WHERE artists.name LIKE "jefferson%"
ORDER BY artists.name, albums.name;

SELECT * FROM viewName;

<--  <> means not equal -->
SELECT * FROM songs WHERE track <> 71;

SELECT count(*) FROM songs --> show how many songs there are

DROP VIEW viewName;

CREATE VIEW viewName AS SELECT albums.name FROM albums ORDER BY name COLLATE NOCASE;

DELETE FROM songs WHERE track < 50;

DISTINCT -- avoids duplicated rows
SELECT DISTINCT title FROM songs INNER JOIN albums ON songs.album = albums._id INNER JOIN artists ON albums.artist = artists._id WHERE artists.name LIKE "Aerosmith%" ORDER BY title;

SELECT count(DISTINCT title) FROM songs INNER JOIN albums ON songs.album = albums._id INNER JOIN artists ON albums.artist = artists._id WHERE artists.name LIKE "Aerosmith%" ORDER BY title;

--Update--

UPDATE artists SET name = "One Kitten" WHERE artists.name = "Mehitabel";
